# utility functions to extract color from scenes
get_color(f(Color1,f(Color2,f(Color3,*))),Position,X):-third_obj(f(Color1,f(Color2,f(Color3,*))),X),same_position(Position,3rd).
get_color(f(Color1,f(Color2,f(Color3,*))),Position,X):-first_obj(f(Color1,f(Color2,f(Color3,*))),X),same_position(Position,1st).
get_color(f(Color1,f(Color2,f(Color3,*))),Position,X):-second_obj(f(Color1,f(Color2,f(Color3,*))),X),same_position(Position,2nd).
get_color(f(Color1,f(Color2,*)),Position,X):-first_obj(f(Color1,f(Color2,*)),X),same_position(Position,1st).
get_color(f(Color1,f(Color2,*)),Position,X):-second_obj(f(Color1,f(Color2,*)),X),same_position(Position,2nd).
first_obj(f(Color1,f(Color2,f(Color3,*))),Color1):-.
first_obj(f(Color1,f(Color2,*)),Color1):-.
second_obj(f(Color1,f(Color2,*)),Color2):-.
second_obj(f(Color1,f(Color2,f(Color3,*))),Color2):-.
third_obj(f(Color1,f(Color2,f(Color3,*))),Color3):-.
# parse the visual scene as a list of colors
scene(f(Color1,f(Color2,f(Color3,*)))):-chain(g(Object1,g(Object2,g(Object3,**)))),color(Object1,Color1),color(Object2,Color2),color(Object3,Color3).
scene_2(f(Color1,f(Color2,*))):-chain(g(Object1,g(Object2,g(Object3,**)))),color(Object1,Color1),color(Object2,Color2).
# generate a chain of objects from an image
chain(g(Object1,g(Object2,g(Object3,**)))):-left_of(Object1,Object2),left_of(Object2,Object3).
# delete
delete(X,f(X,Y),Y):-.
delete(X,f(Y,Z),f(Y,V)):-delete(X,Z,V).
# append
# simplified version, one element to be appended: 
# append(X,Y,f(X,Y)):-.
append(*,X,X):-.
append(f(X,Y),Z,f(X,V)):-append(Y,Z,V).
# reverse
# the empty list is already reversed.
reverse(f(H,T),A,R):-reverse(T,f(H,A),R).
reverse(*,A,A):-.

# a list of 1 item is already reversed. This special case is, strictly speaking, optional, as it will be handled by the general case.
# The general case, a list of length >= 1 , is reversed by
# reversing its tail, and
# appending its head to the now-reversed tail
# reverse(f(X,Xs),R):-reverse(Xs,T),append(T,f(X,*),R).
#reverse(f(X,Y),Z,V):-reverse(Y,f(X,Z),V).


# sorting
sort(X,Y):-perm(X,Y),is_sorted(Y).
is_sorted(f(X,*)):-.
is_sorted(f(X,f(Y,Z))):-is_sorted(f(Y,Z)),smaller(X,Y).
#is_sorted(*):-.
#is_sorted(f(Color1,f(Color2,X))):-smaller(Color1,Color2),is_sorted(X).
# perm(*,*):-.
# perm(L,f(H,T)):-append(V,f(H,U),L),append(V,U,W),perm(W,T).
perm(f(X,Y),Z):-perm(Y,V),delete(X,Z,V).
# simplified perm

# perm(f(Color1,*),f(Color1,*)):-.
# perm(f(Color1,f(Color2,*)),f(Color1,f(Color2,*))):-.
# perm(f(Color1,f(Color2,*)),f(Color2,f(Color1,*))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color1,f(Color2,f(Color3,*)))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color1,f(Color3,f(Color2,*)))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color2,f(Color1,f(Color3,*)))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color2,f(Color3,f(Color1,*)))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color3,f(Color1,f(Color2,*)))):-.
# perm(f(Color1,f(Color2,f(Color3,*))),f(Color3,f(Color2,f(Color1,*)))):-.